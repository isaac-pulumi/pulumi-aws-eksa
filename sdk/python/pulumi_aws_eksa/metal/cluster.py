# coding=utf-8
# *** WARNING: this file was generated by Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['ClusterArgs', 'Cluster']

@pulumi.input_type
class ClusterArgs:
    def __init__(__self__, *,
                 cluster_name: pulumi.Input[str],
                 metro: pulumi.Input[str],
                 project_id: pulumi.Input[str],
                 control_plane_count: Optional[float] = None,
                 control_plane_device_type: Optional[pulumi.Input[str]] = None,
                 data_plane_count: Optional[float] = None,
                 data_plane_device_type: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Cluster resource.
        :param pulumi.Input[str] cluster_name: The name of your EKSA Metal Cluster
        :param pulumi.Input[str] metro: The metro to deploy this cluster to
        :param pulumi.Input[str] project_id: The project to deploy this cluster to
        :param float control_plane_count: The number of control plane nodes. Set to 3 or 5 for a highly available setup
        :param pulumi.Input[str] control_plane_device_type: Device type for the control plane nodes
        :param float data_plane_count: The number of data plane nodes
        :param pulumi.Input[str] data_plane_device_type: Device type for the data plane nodes
        """
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "metro", metro)
        pulumi.set(__self__, "project_id", project_id)
        if control_plane_count is None:
            control_plane_count = 1
        if control_plane_count is not None:
            pulumi.set(__self__, "control_plane_count", control_plane_count)
        if control_plane_device_type is None:
            control_plane_device_type = 'c3.small.x86'
        if control_plane_device_type is not None:
            pulumi.set(__self__, "control_plane_device_type", control_plane_device_type)
        if data_plane_count is None:
            data_plane_count = 1
        if data_plane_count is not None:
            pulumi.set(__self__, "data_plane_count", data_plane_count)
        if data_plane_device_type is None:
            data_plane_device_type = 'c3.small.x86'
        if data_plane_device_type is not None:
            pulumi.set(__self__, "data_plane_device_type", data_plane_device_type)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> pulumi.Input[str]:
        """
        The name of your EKSA Metal Cluster
        """
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter
    def metro(self) -> pulumi.Input[str]:
        """
        The metro to deploy this cluster to
        """
        return pulumi.get(self, "metro")

    @metro.setter
    def metro(self, value: pulumi.Input[str]):
        pulumi.set(self, "metro", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[str]:
        """
        The project to deploy this cluster to
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="controlPlaneCount")
    def control_plane_count(self) -> Optional[float]:
        """
        The number of control plane nodes. Set to 3 or 5 for a highly available setup
        """
        return pulumi.get(self, "control_plane_count")

    @control_plane_count.setter
    def control_plane_count(self, value: Optional[float]):
        pulumi.set(self, "control_plane_count", value)

    @property
    @pulumi.getter(name="controlPlaneDeviceType")
    def control_plane_device_type(self) -> Optional[pulumi.Input[str]]:
        """
        Device type for the control plane nodes
        """
        return pulumi.get(self, "control_plane_device_type")

    @control_plane_device_type.setter
    def control_plane_device_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "control_plane_device_type", value)

    @property
    @pulumi.getter(name="dataPlaneCount")
    def data_plane_count(self) -> Optional[float]:
        """
        The number of data plane nodes
        """
        return pulumi.get(self, "data_plane_count")

    @data_plane_count.setter
    def data_plane_count(self, value: Optional[float]):
        pulumi.set(self, "data_plane_count", value)

    @property
    @pulumi.getter(name="dataPlaneDeviceType")
    def data_plane_device_type(self) -> Optional[pulumi.Input[str]]:
        """
        Device type for the data plane nodes
        """
        return pulumi.get(self, "data_plane_device_type")

    @data_plane_device_type.setter
    def data_plane_device_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_plane_device_type", value)


class Cluster(pulumi.ComponentResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_name: Optional[pulumi.Input[str]] = None,
                 control_plane_count: Optional[float] = None,
                 control_plane_device_type: Optional[pulumi.Input[str]] = None,
                 data_plane_count: Optional[float] = None,
                 data_plane_device_type: Optional[pulumi.Input[str]] = None,
                 metro: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a Cluster resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cluster_name: The name of your EKSA Metal Cluster
        :param float control_plane_count: The number of control plane nodes. Set to 3 or 5 for a highly available setup
        :param pulumi.Input[str] control_plane_device_type: Device type for the control plane nodes
        :param float data_plane_count: The number of data plane nodes
        :param pulumi.Input[str] data_plane_device_type: Device type for the data plane nodes
        :param pulumi.Input[str] metro: The metro to deploy this cluster to
        :param pulumi.Input[str] project_id: The project to deploy this cluster to
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ClusterArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Cluster resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ClusterArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ClusterArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_name: Optional[pulumi.Input[str]] = None,
                 control_plane_count: Optional[float] = None,
                 control_plane_device_type: Optional[pulumi.Input[str]] = None,
                 data_plane_count: Optional[float] = None,
                 data_plane_device_type: Optional[pulumi.Input[str]] = None,
                 metro: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is not None:
            raise ValueError('ComponentResource classes do not support opts.id')
        else:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ClusterArgs.__new__(ClusterArgs)

            if cluster_name is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_name'")
            __props__.__dict__["cluster_name"] = cluster_name
            if control_plane_count is None:
                control_plane_count = 1
            __props__.__dict__["control_plane_count"] = control_plane_count
            if control_plane_device_type is None:
                control_plane_device_type = 'c3.small.x86'
            __props__.__dict__["control_plane_device_type"] = control_plane_device_type
            if data_plane_count is None:
                data_plane_count = 1
            __props__.__dict__["data_plane_count"] = data_plane_count
            if data_plane_device_type is None:
                data_plane_device_type = 'c3.small.x86'
            __props__.__dict__["data_plane_device_type"] = data_plane_device_type
            if metro is None and not opts.urn:
                raise TypeError("Missing required property 'metro'")
            __props__.__dict__["metro"] = metro
            if project_id is None and not opts.urn:
                raise TypeError("Missing required property 'project_id'")
            __props__.__dict__["project_id"] = project_id
            __props__.__dict__["admin_ip"] = None
            __props__.__dict__["private_ssh_key"] = None
        super(Cluster, __self__).__init__(
            'aws-eksa:metal:Cluster',
            resource_name,
            __props__,
            opts,
            remote=True)

    @property
    @pulumi.getter(name="adminIp")
    def admin_ip(self) -> pulumi.Output[str]:
        """
        The IP address of the admin server
        """
        return pulumi.get(self, "admin_ip")

    @property
    @pulumi.getter(name="privateSshKey")
    def private_ssh_key(self) -> pulumi.Output[str]:
        """
        The private SSH key to connect to the nodes
        """
        return pulumi.get(self, "private_ssh_key")

